# AI Crew Builder Team - Docker Compose Configuration
# Development and deployment orchestration

version: '3.8'

services:
  # ==========================================
  # Main Application Service
  # ==========================================
  builder-team:
    build:
      context: .
      target: development
    container_name: ai-crew-builder-team
    ports:
      - "8000:8000"  # Main API
      - "8001:8001"  # WebSocket interface
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      - DATABASE_URL=sqlite:///data/builder_team.db
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./config:/app/config
      - ./scripts:/app/scripts
      - ./openspec:/app/openspec
      - ./src:/app/src
      - ./logs:/app/logs
      - ./data:/app/data
      - ./uploads:/app/uploads
      - ./backups:/app/backups
      - ./generated:/app/generated
      - ./.env:/app/.env
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - builder-network

  # ==========================================
  # Redis Service (Caching and Task Queue)
  # ==========================================
  redis:
    image: redis:7-alpine
    container_name: builder-team-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    networks:
      - builder-network

  # ==========================================
  # PostgreSQL Database (Production)
  # ==========================================
  postgres:
    image: postgres:15-alpine
    container_name: builder-team-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=builder_team
      - POSTGRES_USER=appuser
      - POSTGRES_PASSWORD=app_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: unless-stopped
    networks:
      - builder-network

  # ==========================================
  # Nginx Reverse Proxy
  # ==========================================
  nginx:
    image: nginx:alpine
    container_name: builder-team-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - builder-team
    restart: unless-stopped
    networks:
      - builder-network

  # ==========================================
  # Monitoring Service
  # ==========================================
  monitoring:
    image: grafana/grafana:latest
    container_name: builder-team-monitoring
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - builder-team
    restart: unless-stopped
    networks:
      - builder-network

  # ==========================================
  # Log Aggregation
  # ==========================================
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: builder-team-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - builder-network

  kibana:
    image: kibana:8.11.0
    container_name: builder-team-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - builder-network

  # ==========================================
  # Background Workers
  # ==========================================
  worker:
    build:
      context: .
      target: development
    container_name: builder-team-worker
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=sqlite:///data/builder_team.db
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./config:/app/config
      - ./scripts:/app/scripts
      - ./src:/app/src
      - ./logs:/app/logs
      - ./data:/app/data
      - ./.env:/app/.env
    depends_on:
      - redis
      - postgres
    command: celery -A src.core.celery worker --loglevel=info
    restart: unless-stopped
    networks:
      - builder-network

  # ==========================================
  # Task Scheduler
  # ==========================================
  scheduler:
    build:
      context: .
      target: development
    container_name: builder-team-scheduler
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=sqlite:///data/builder_team.db
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./config:/app/config
      - ./scripts:/app/scripts
      - ./src:/app/src
      - ./logs:/app/logs
      - ./data:/app/data
      - ./.env:/app/.env
    depends_on:
      - redis
      - postgres
    command: celery -A src.core.celery beat --loglevel=info
    restart: unless-stopped
    networks:
      - builder-network

# ==========================================
# Volumes
# ==========================================
volumes:
  postgres_data:
  redis_data:
  grafana_data:
  elasticsearch_data:

# ==========================================
# Networks
# ==========================================
networks:
  builder-network:
    driver: bridge

# ==========================================
# Production Override
# =================================---------
# For production deployment:
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d